# Default values for vault.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
nameOverride: ""
fullnameOverride: ""

# Service account configuration
serviceAccount:
  create: true
  name: ""
  annotations: {}

# Vault deployment configuration
vault:
  size: 3
  image:
    repository: hashicorp/vault
    tag: "1.14.1"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8200
    annotations: {}
    loadBalancerIP: ""
    externalTrafficPolicy: ""
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    hosts:
      - host: vault2.k8s.djabjo.ru
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - vault2.k8s.djabjo.ru
        secretName: vault-servicetls
  storage:
    enabled: true
    storageClassName: ""
    accessModes:
      - ReadWriteOnce
    size: 1Gi
    volumeMode: Filesystem
  volumeMounts: []
  volumes: []
  # HCL config as a single string
  configHCL: |
    storage "raft" {
      path = "/vault/file"
    }
    listener "tcp" {
      address = "0.0.0.0:8200"
      tls_cert_file = "/vault/tls/tls.crt"
      tls_key_file  = "/vault/tls/tls.key"
    }
    api_addr = "https://vault2.k8s.djabjo.ru:8200"
    cluster_addr = "https://$(POD_NAME):8201"
    ui = true
  resources:
    vault:
      limits:
        memory: "512Mi"
        cpu: "200m"
      requests:
        memory: "256Mi"
        cpu: "100m"
  env:
    - name: VAULT_LOG_LEVEL
      value: "debug"
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
    runAsGroup: 1000
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
  nodeSelector: {}
  affinity: {}
  tolerations: []
  annotations:
    common/annotation: "true"
  vaultAnnotations:
    type/instance: "vault"
  vaultLabels:
    example.com/log-format: "json"
  veleroEnabled: true
  caNamespaces:
    - "vswh"
  unsealConfig:
    options:
      preFlightChecks: true
      storeRootToken: true
      secretShares: 5
      secretThreshold: 3
    kubernetes:
      secretNamespace: test
  externalConfig:
    policies:
      - name: allow_secrets
        rules: path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }
    auth:
      - type: kubernetes
        roles:
          - name: test
            bound_service_account_names: ["test", "vault-secrets-webhook"]
            bound_service_account_namespaces: ["test", "vswh"]
            policies: allow_secrets
            ttl: 1h
    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2
    startupSecrets:
      - type: kv
        path: secret/data/accounts/aws
        data:
          data:
            AWS_ACCESS_KEY_ID: secretId
            AWS_SECRET_ACCESS_KEY: s3cr3t
      - type: kv
        path: secret/data/dockerrepo
        data:
          data:
            DOCKER_REPO_USER: dockerrepouser
            DOCKER_REPO_PASSWORD: dockerrepopassword
      - type: kv
        path: secret/data/mysql
        data:
          data:
            MYSQL_ROOT_PASSWORD: s3cr3t
  statsdDisabled: true
  serviceRegistrationEnabled: true

# RBAC configuration
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["secrets", "configmaps", "events", "pods", "services"]
      verbs: ["*"]
    - apiGroups: [""]
      resources: ["namespaces"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps", "extensions"]
      resources: ["replicasets", "deployments", "deployments/finalizers", "statefulsets"]
      verbs: ["*"]
    - apiGroups: ["apiextensions.k8s.io"]
      resources: ["customresourcedefinitions"]
      verbs: ["get"]
    - apiGroups: ["route.openshift.io"]
      resources: ["routes", "routes/custom-host"]
      verbs: ["list", "get", "create", "update", "watch"]
    - apiGroups: ["extensions", "networking.k8s.io"]
      resources: ["ingresses"]
      verbs: ["list", "get", "create", "update", "watch"]
    - apiGroups: ["monitoring.coreos.com"]
      resources: ["servicemonitors"]
      verbs: ["update", "list", "get", "create", "watch"]
    - apiGroups: ["coordination.k8s.io"]
      resources: ["leases"]
      verbs: ["*"]

tls:
  enabled: true
  secretName: vault-servicetls
  selfSigned:
    enabled: true
    commonName: "vault"
    organization: "Vault"
    country: "US"
    state: "CA"
    locality: "San Francisco"
pdb:
  enabled: true
  minAvailable: 1
monitoring:
  serviceMonitor:
    enabled: false
    additionalLabels: {}
    metricRelabelings: []
    relabelings: [] 

# Vault Raft StatefulSet variables
replicaCountvault: 3

images:
  repository: hashicorp/vault
  tag: "1.14.1"
  pullPolicy: IfNotPresent

initContainer:
  image: busybox

serviceAccountvault:
  name: vault

podSecurityContextvault:
  runAsUser: 100
  runAsGroup: 1000
  fsGroup: 1000

affinityvault: {}
nodeSelectorvault: {}
tolerationsvault: []
terminationGracePeriodSecondsvault: 10

vaultEnvsConfig:
  - name: VAULT_LOG_LEVEL
    value: debug

livenessProbevault:
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

readinessProbevault:
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

resourcesvault:
  limits:
    cpu: 200m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

pvc:
  size: 1Gi
  storageClassName: "local-path"
  accessMode: ReadWriteOnce

tlsSecretName: vault-servicetls